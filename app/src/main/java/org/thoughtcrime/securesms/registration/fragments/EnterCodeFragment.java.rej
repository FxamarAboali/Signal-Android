diff a/app/src/main/java/org/thoughtcrime/securesms/registration/fragments/EnterCodeFragment.java b/app/src/main/java/org/thoughtcrime/securesms/registration/fragments/EnterCodeFragment.java	(rejected hunks)
@@ -1,5 +1,8 @@
 package org.thoughtcrime.securesms.registration.fragments;
 
+import static org.thoughtcrime.securesms.registration.fragments.RegistrationViewDelegate.setDebugLogSubmitMultiTapView;
+import static org.thoughtcrime.securesms.registration.fragments.RegistrationViewDelegate.showConfirmNumberDialogIfTranslated;
+
 import android.animation.Animator;
 import android.os.Bundle;
 import android.telephony.PhoneStateListener;
@@ -12,38 +15,42 @@
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
-import androidx.appcompat.app.AlertDialog;
-import androidx.navigation.NavController;
+import androidx.lifecycle.ViewModelProviders;
 import androidx.navigation.Navigation;
+import androidx.navigation.fragment.NavHostFragment;
+
+import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 
 import org.greenrobot.eventbus.EventBus;
 import org.greenrobot.eventbus.Subscribe;
 import org.greenrobot.eventbus.ThreadMode;
 import org.signal.core.util.logging.Log;
+import org.thoughtcrime.securesms.LoggingFragment;
 import org.thoughtcrime.securesms.R;
 import org.thoughtcrime.securesms.components.registration.CallMeCountDownView;
 import org.thoughtcrime.securesms.components.registration.VerificationCodeView;
 import org.thoughtcrime.securesms.components.registration.VerificationPinKeyboard;
-import org.thoughtcrime.securesms.pin.PinRestoreRepository;
 import org.thoughtcrime.securesms.registration.ReceivedSmsEvent;
-import org.thoughtcrime.securesms.registration.service.CodeVerificationRequest;
-import org.thoughtcrime.securesms.registration.service.RegistrationCodeRequest;
-import org.thoughtcrime.securesms.registration.service.RegistrationService;
+import org.thoughtcrime.securesms.registration.VerifyAccountRepository;
 import org.thoughtcrime.securesms.registration.viewmodel.RegistrationViewModel;
 import org.thoughtcrime.securesms.util.CommunicationActions;
 import org.thoughtcrime.securesms.util.FeatureFlags;
+import org.thoughtcrime.securesms.util.LifecycleDisposable;
 import org.thoughtcrime.securesms.util.SupportEmailUtil;
+import org.thoughtcrime.securesms.util.ViewUtil;
 import org.thoughtcrime.securesms.util.concurrent.AssertedSuccessListener;
 import org.thoughtcrime.securesms.util.concurrent.SimpleTask;
+import org.whispersystems.signalservice.internal.push.LockedException;
 
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
-public final class EnterCodeFragment extends BaseRegistrationFragment
-                                     implements SignalStrengthPhoneStateListener.Callback
-{
+import io.reactivex.rxjava3.android.schedulers.AndroidSchedulers;
+import io.reactivex.rxjava3.disposables.Disposable;
+
+public final class EnterCodeFragment extends LoggingFragment implements SignalStrengthPhoneStateListener.Callback {
 
   private static final String TAG = Log.tag(EnterCodeFragment.class);
 
@@ -57,7 +64,10 @@
   private View                    serviceWarning;
   private boolean                 autoCompleting;
 
-  private PhoneStateListener signalStrengthListener;
+  private PhoneStateListener    signalStrengthListener;
+  private RegistrationViewModel viewModel;
+
+  private final LifecycleDisposable disposables = new LifecycleDisposable();
 
   @Override
   public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
@@ -82,7 +92,7 @@
     signalStrengthListener = new SignalStrengthPhoneStateListener(this, this);
 
     connectKeyboard(verificationCodeView, keyboard);
-    hideKeyboard(requireContext(), view);
+    ViewUtil.hideKeyboard(requireContext(), view);
 
     setOnCodeFullyEnteredListener(verificationCodeView);
 
@@ -99,15 +109,16 @@
 
     noCodeReceivedHelp.setOnClickListener(v -> sendEmailToSupport());
 
-    RegistrationViewModel model = getModel();
-    model.getSuccessfulCodeRequestAttempts().observe(getViewLifecycleOwner(), (attempts) -> {
+    disposables.bindTo(getViewLifecycleOwner().getLifecycle());
+    viewModel = ViewModelProviders.of(requireActivity()).get(RegistrationViewModel.class);
+    viewModel.getSuccessfulCodeRequestAttempts().observe(getViewLifecycleOwner(), (attempts) -> {
       if (attempts >= 3) {
         noCodeReceivedHelp.setVisibility(View.VISIBLE);
         scrollView.postDelayed(() -> scrollView.smoothScrollTo(0, noCodeReceivedHelp.getBottom()), 15000);
       }
     });
 
-    model.onStartEnterCode();
+    viewModel.onStartEnterCode();
   }
 
   private void onWrongNumber() {
@@ -117,116 +128,113 @@
 
   private void setOnCodeFullyEnteredListener(VerificationCodeView verificationCodeView) {
     verificationCodeView.setOnCompleteListener(code -> {
-      RegistrationViewModel model = getModel();
 
-      model.onVerificationCodeEntered(code);
       callMeCountDown.setVisibility(View.INVISIBLE);
       wrongNumber.setVisibility(View.INVISIBLE);
       keyboard.displayProgress();
 
-      RegistrationService registrationService = RegistrationService.getInstance(model.getNumber().getE164Number(), model.getRegistrationSecret());
+      Disposable verify = viewModel.verifyCodeAndRegisterAccountWithoutRegistrationLock(code)
+                                   .observeOn(AndroidSchedulers.mainThread())
+                                   .subscribe(processor -> {
+                                     if (processor.hasResult()) {
+                                       handleSuccessfulRegistration();
+                                     } else if (processor.rateLimit()) {
+                                       handleRateLimited();
+                                     } else if (processor.registrationLock() && !processor.isKbsLocked()) {
+                                       LockedException lockedException = processor.getLockedException();
+                                       handleRegistrationLock(lockedException.getTimeRemaining());
+                                     } else if (processor.isKbsLocked()) {
+                                       handleKbsAccountLocked();
+                                     } else if (processor.authorizationFailed()) {
+                                       handleIncorrectCodeError();
+                                     } else {
+                                       Log.w(TAG, "Unable to verify code", processor.getError());
+                                       handleGeneralError();
+                                     }
+                                   });
 
-      registrationService.verifyAccount(requireActivity(), model.getFcmToken(), code, null, null,
-        new CodeVerificationRequest.VerifyCallback() {
+      disposables.add(verify);
+    });
+  }
 
-          @Override
-          public void onSuccessfulRegistration() {
-            SimpleTask.run(() -> {
-              long startTime = System.currentTimeMillis();
-              try {
-                FeatureFlags.refreshSync();
-                Log.i(TAG, "Took " + (System.currentTimeMillis() - startTime) + " ms to get feature flags.");
-              } catch (IOException e) {
-                Log.w(TAG, "Failed to refresh flags after " + (System.currentTimeMillis() - startTime) + " ms.", e);
-              }
-              return null;
-            }, none -> {
-              keyboard.displaySuccess().addListener(new AssertedSuccessListener<Boolean>() {
-                @Override
-                public void onSuccess(Boolean result) {
-                  handleSuccessfulRegistration();
-                }
-              });
-            });
-          }
-
-          @Override
-          public void onV1RegistrationLockPinRequiredOrIncorrect(long timeRemaining) {
-            model.setLockedTimeRemaining(timeRemaining);
-            keyboard.displayLocked().addListener(new AssertedSuccessListener<Boolean>() {
-              @Override
-              public void onSuccess(Boolean r) {
-                Navigation.findNavController(requireView())
-                          .navigate(EnterCodeFragmentDirections.actionRequireKbsLockPin(timeRemaining, true));
-              }
-            });
-          }
-
-          @Override
-          public void onKbsRegistrationLockPinRequired(long timeRemaining, @NonNull PinRestoreRepository.TokenData tokenData, @NonNull String kbsStorageCredentials) {
-            model.setLockedTimeRemaining(timeRemaining);
-            model.setKeyBackupTokenData(tokenData);
-            keyboard.displayLocked().addListener(new AssertedSuccessListener<Boolean>() {
-              @Override
-              public void onSuccess(Boolean r) {
-                Navigation.findNavController(requireView())
-                          .navigate(EnterCodeFragmentDirections.actionRequireKbsLockPin(timeRemaining, false));
-              }
-            });
-          }
+  public void handleSuccessfulRegistration() {
+    SimpleTask.run(() -> {
+      long startTime = System.currentTimeMillis();
+      try {
+        FeatureFlags.refreshSync();
+        Log.i(TAG, "Took " + (System.currentTimeMillis() - startTime) + " ms to get feature flags.");
+      } catch (IOException e) {
+        Log.w(TAG, "Failed to refresh flags after " + (System.currentTimeMillis() - startTime) + " ms.", e);
+      }
+      return null;
+    }, none -> {
+      keyboard.displaySuccess().addListener(new AssertedSuccessListener<Boolean>() {
+        @Override
+        public void onSuccess(Boolean result) {
+          Navigation.findNavController(requireView()).navigate(EnterCodeFragmentDirections.actionSuccessfulRegistration());
+        }
+      });
+    });
+  }
 
-          @Override
-          public void onIncorrectKbsRegistrationLockPin(@NonNull PinRestoreRepository.TokenData tokenData) {
-            throw new AssertionError("Unexpected, user has made no pin guesses");
-          }
-
-          @Override
-          public void onRateLimited() {
-            keyboard.displayFailure().addListener(new AssertedSuccessListener<Boolean>() {
-              @Override
-              public void onSuccess(Boolean r) {
-                new AlertDialog.Builder(requireContext())
-                               .setTitle(R.string.RegistrationActivity_too_many_attempts)
-                               .setMessage(R.string.RegistrationActivity_you_have_made_too_many_attempts_please_try_again_later)
-                               .setPositiveButton(android.R.string.ok, (dialog, which) -> {
-                                 callMeCountDown.setVisibility(View.VISIBLE);
-                                 wrongNumber.setVisibility(View.VISIBLE);
-                                 verificationCodeView.clear();
-                                 keyboard.displayKeyboard();
-                               })
-                               .show();
-              }
-            });
-          }
+  public void handleRateLimited() {
+    keyboard.displayFailure().addListener(new AssertedSuccessListener<Boolean>() {
+      @Override
+      public void onSuccess(Boolean r) {
+        MaterialAlertDialogBuilder builder = new MaterialAlertDialogBuilder(requireContext());
+
+        builder.setTitle(R.string.RegistrationActivity_too_many_attempts)
+               .setMessage(R.string.RegistrationActivity_you_have_made_too_many_attempts_please_try_again_later)
+               .setPositiveButton(android.R.string.ok, (dialog, which) -> {
+                 callMeCountDown.setVisibility(View.VISIBLE);
+                 wrongNumber.setVisibility(View.VISIBLE);
+                 verificationCodeView.clear();
+                 keyboard.displayKeyboard();
+               })
+               .show();
+      }
+    });
+  }
 
-          @Override
-          public void onKbsAccountLocked(@Nullable Long timeRemaining) {
-            if (timeRemaining != null) {
-              model.setLockedTimeRemaining(timeRemaining);
-            }
-            Navigation.findNavController(requireView()).navigate(RegistrationLockFragmentDirections.actionAccountLocked());
-          }
+  public void handleRegistrationLock(long timeRemaining) {
+    keyboard.displayLocked().addListener(new AssertedSuccessListener<Boolean>() {
+      @Override
+      public void onSuccess(Boolean r) {
+        Navigation.findNavController(requireView())
+                  .navigate(EnterCodeFragmentDirections.actionRequireKbsLockPin(timeRemaining, false));
+      }
+    });
+  }
+
+  public void handleKbsAccountLocked() {
+    Navigation.findNavController(requireView()).navigate(RegistrationLockFragmentDirections.actionAccountLocked());
+  }
 
-          @Override
-          public void onError() {
-            Toast.makeText(requireContext(), R.string.RegistrationActivity_error_connecting_to_service, Toast.LENGTH_LONG).show();
-            keyboard.displayFailure().addListener(new AssertedSuccessListener<Boolean>() {
-              @Override
-              public void onSuccess(Boolean result) {
-                callMeCountDown.setVisibility(View.VISIBLE);
-                wrongNumber.setVisibility(View.VISIBLE);
-                verificationCodeView.clear();
-                keyboard.displayKeyboard();
-              }
-            });
-          }
-        });
+  public void handleIncorrectCodeError() {
+    Toast.makeText(requireContext(), R.string.RegistrationActivity_incorrect_code, Toast.LENGTH_LONG).show();
+    keyboard.displayFailure().addListener(new AssertedSuccessListener<Boolean>() {
+      @Override
+      public void onSuccess(Boolean result) {
+        callMeCountDown.setVisibility(View.VISIBLE);
+        wrongNumber.setVisibility(View.VISIBLE);
+        verificationCodeView.clear();
+        keyboard.displayKeyboard();
+      }
+    });
+  }
+
+  public void handleGeneralError() {
+    Toast.makeText(requireContext(), R.string.RegistrationActivity_error_connecting_to_service, Toast.LENGTH_LONG).show();
+    keyboard.displayFailure().addListener(new AssertedSuccessListener<Boolean>() {
+      @Override
+      public void onSuccess(Boolean result) {
+        callMeCountDown.setVisibility(View.VISIBLE);
+        wrongNumber.setVisibility(View.VISIBLE);
+        verificationCodeView.clear();
+        keyboard.displayKeyboard();
+      }
     });
   }
-
-  private void handleSuccessfulRegistration() {
-    Navigation.findNavController(requireView()).navigate(EnterCodeFragmentDirections.actionSuccessfulRegistration());
-  }
 
   @Override
   public void onStart() {
@@ -283,46 +291,28 @@
   private void handlePhoneCallRequest() {
     showConfirmNumberDialogIfTranslated(requireContext(),
                                         R.string.RegistrationActivity_you_will_receive_a_call_to_verify_this_number,
-                                        getModel().getNumber().getE164Number(),
+                                        viewModel.getNumber().getE164Number(),
                                         this::handlePhoneCallRequestAfterConfirm,
                                         this::onWrongNumber);
   }
 
   private void handlePhoneCallRequestAfterConfirm() {
-    RegistrationViewModel model   = getModel();
-    String                captcha = model.getCaptchaToken();
-    model.clearCaptchaResponse();
-
-    model.onCallRequested();
-
-    NavController navController = Navigation.findNavController(callMeCountDown);
-
-    RegistrationService registrationService = RegistrationService.getInstance(model.getNumber().getE164Number(), model.getRegistrationSecret());
-
-    registrationService.requestVerificationCode(requireActivity(), RegistrationCodeRequest.Mode.PHONE_CALL, captcha,
-      new RegistrationCodeRequest.SmsVerificationCodeCallback() {
-
-        @Override
-        public void onNeedCaptcha() {
-          navController.navigate(EnterCodeFragmentDirections.actionRequestCaptcha());
-        }
-
-        @Override
-        public void requestSent(@Nullable String fcmToken) {
-          model.setFcmToken(fcmToken);
-          model.markASuccessfulAttempt();
-        }
-
-        @Override
-        public void onRateLimited() {
-          Toast.makeText(requireContext(), R.string.RegistrationActivity_rate_limited_to_service, Toast.LENGTH_LONG).show();
-        }
-
-        @Override
-        public void onError() {
-          Toast.makeText(requireContext(), R.string.RegistrationActivity_unable_to_connect_to_service, Toast.LENGTH_LONG).show();
-        }
-      });
+    Disposable request = viewModel.requestVerificationCode(VerifyAccountRepository.Mode.PHONE_CALL)
+                                  .observeOn(AndroidSchedulers.mainThread())
+                                  .subscribe(processor -> {
+                                    if (processor.hasResult()) {
+                                      Toast.makeText(requireContext(), R.string.RegistrationActivity_call_requested, Toast.LENGTH_LONG).show();
+                                    } else if (processor.captchaRequired()) {
+                                      NavHostFragment.findNavController(this).navigate(EnterCodeFragmentDirections.actionRequestCaptcha());
+                                    } else if (processor.rateLimit()) {
+                                      Toast.makeText(requireContext(), R.string.RegistrationActivity_rate_limited_to_service, Toast.LENGTH_LONG).show();
+                                    } else {
+                                      Log.w(TAG, "Unable to request phone code", processor.getError());
+                                      Toast.makeText(requireContext(), R.string.RegistrationActivity_unable_to_connect_to_service, Toast.LENGTH_LONG).show();
+                                    }
+                                  });
+
+    disposables.add(request);
   }
 
   private void connectKeyboard(VerificationCodeView verificationCodeView, VerificationPinKeyboard keyboard) {
@@ -341,10 +331,9 @@
   public void onResume() {
     super.onResume();
 
-    RegistrationViewModel model = getModel();
-    model.getLiveNumber().observe(getViewLifecycleOwner(), (s) -> header.setText(requireContext().getString(R.string.RegistrationActivity_enter_the_code_we_sent_to_s, s.getFullFormattedNumber())));
+    header.setText(requireContext().getString(R.string.RegistrationActivity_enter_the_code_we_sent_to_s, viewModel.getNumber().getFullFormattedNumber()));
 
-    model.getCanCallAtTime().observe(getViewLifecycleOwner(), callAtTime -> callMeCountDown.startCountDownTo(callAtTime));
+    viewModel.getCanCallAtTime().observe(getViewLifecycleOwner(), callAtTime -> callMeCountDown.startCountDownTo(callAtTime));
   }
 
   private void sendEmailToSupport() {
@@ -387,8 +376,11 @@
                     @Override public void onAnimationEnd(Animator animation) {
                       serviceWarning.setVisibility(View.GONE);
                     }
+
                     @Override public void onAnimationStart(Animator animation) {}
+
                     @Override public void onAnimationCancel(Animator animation) {}
+
                     @Override public void onAnimationRepeat(Animator animation) {}
                   })
                   .start();
